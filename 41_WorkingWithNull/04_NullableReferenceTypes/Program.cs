namespace _04_NullableReferenceTypes
{
    internal class Program
    {
        static void Main(string[] args)
        {
            // Nullable reference types are reference types that can be assigned a value or null.
            // Nullable reference types are festures of C# 8.0 and later.
            // To enable nullable reference types, add the following line to the .csproj file: <Nullable>enable</Nullable>
            // To disable nullable reference types, add the following line to the .csproj file: <Nullable>disable</Nullable>
            // We can make nullable reference types warning as error by adding the following line to the .csproj file: <WarningsAsErrors>nullable</WarningsAsErrors>
            // Nullable reference types are useful when you need to represent an optional reference.
            // From .NET 6.0, nullable reference types are enabled by default.

            // Nullable reference types are compiler features that help you avoid null reference exceptions.
            // Nullable reference types are compliled time effect only.
            // Nullable reference types are not runtime effect.
            // Nullable reference types are not enforced at runtime.
            // Nullable reference types are enforced at compile time.

            // The execution of the code created with nullable reference types is the same as the code created without nullable reference types.
            // Intermediate language (IL) code generated by the compiler is the same for both nullable reference types and non-nullable reference types.

            // string name = null;   // CS8625: Cannot convert null literal to non-nullable reference type. (warning CS8600)
            // string name = "John"; // OK          // non-nullable reference type at compile time and nullable reference type at runtime
            // string? name = null;  // OK           // nullable reference type at compile time and runtime

            // Everything in execution is the same as before.
            // But the compiler will give you warnings and errors at compile time.
            // The way that compiler deal with nullable reference types is different from before.

            // When I am using nullable reference types, I am telling the compiler that I am aware of the null reference exceptions. I expect that there might be null values be passed to my code. I am ready to handle them.
            // When I am using non-nullable reference types, I am telling the compiler that I am not aware of the null reference exceptions. I expect that there will not be null values be passed to my code. I am not ready to handle them.

            // Why do we need nullable reference types?
            // 1. To avoid null reference exceptions.
            // 2. To make the code more readable.
            // 3. To make the code more maintainable.
            // 4. To make the code more reliable.
            // 5. To make the code more robust.
            // 6. To make the code more secure.
            // 7. To make the code more predictable.
            // 8. To make the code more efficient.
            // 9. To make the code more scalable.
            // 10. To make the code more testable.
            // 11. Help compiler to detect potential null reference exceptions.
            // 12. Better reasoning about the code.



            // -------------------------------------------------------------------------------------------

            string? name = null;
            string decision = IsLongName(name) ? "long" : "short";
            Console.WriteLine($"{name} is {decision}");
            Console.ReadKey();
        }

        static bool IsLongName(string? name)
        {
            if (name is null)
                return false;

            return name.Length > 10; // assumption name could be null 

        }
    }
}
